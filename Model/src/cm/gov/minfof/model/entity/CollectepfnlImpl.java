package cm.gov.minfof.model.entity;

import java.math.BigDecimal;

import java.sql.Date;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 04 12:29:37 WAT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CollectepfnlImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Idcollectepfnl,
        Datecollecte,
        Identificateur,
        Iddepartement,
        Codepcfc,
        Idlocalite,
        Collectepfnl,
        IdlocaliteCollectepfnl,
        Detailscollectepfnl,
        Departement,
        Localite;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int IDCOLLECTEPFNL = AttributesEnum.Idcollectepfnl.index();
    public static final int DATECOLLECTE = AttributesEnum.Datecollecte.index();
    public static final int IDENTIFICATEUR = AttributesEnum.Identificateur.index();
    public static final int IDDEPARTEMENT = AttributesEnum.Iddepartement.index();
    public static final int CODEPCFC = AttributesEnum.Codepcfc.index();
    public static final int IDLOCALITE = AttributesEnum.Idlocalite.index();
    public static final int COLLECTEPFNL = AttributesEnum.Collectepfnl.index();
    public static final int IDLOCALITECOLLECTEPFNL = AttributesEnum.IdlocaliteCollectepfnl.index();
    public static final int DETAILSCOLLECTEPFNL = AttributesEnum.Detailscollectepfnl.index();
    public static final int DEPARTEMENT = AttributesEnum.Departement.index();
    public static final int LOCALITE = AttributesEnum.Localite.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CollectepfnlImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("cm.gov.minfof.model.entity.Collectepfnl");
    }

    /**
     * Gets the attribute value for Idcollectepfnl, using the alias name Idcollectepfnl.
     * @return the value of Idcollectepfnl
     */
    public BigDecimal getIdcollectepfnl() {
        return (BigDecimal) getAttributeInternal(IDCOLLECTEPFNL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idcollectepfnl.
     * @param value value to set the Idcollectepfnl
     */
    public void setIdcollectepfnl(BigDecimal value) {
        setAttributeInternal(IDCOLLECTEPFNL, value);
    }

    /**
     * Gets the attribute value for Datecollecte, using the alias name Datecollecte.
     * @return the value of Datecollecte
     */
    public Date getDatecollecte() {
        return (Date) getAttributeInternal(DATECOLLECTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Datecollecte.
     * @param value value to set the Datecollecte
     */
    public void setDatecollecte(Date value) {
        setAttributeInternal(DATECOLLECTE, value);
    }

    /**
     * Gets the attribute value for Identificateur, using the alias name Identificateur.
     * @return the value of Identificateur
     */
    public String getIdentificateur() {
        return (String) getAttributeInternal(IDENTIFICATEUR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Identificateur.
     * @param value value to set the Identificateur
     */
    public void setIdentificateur(String value) {
        setAttributeInternal(IDENTIFICATEUR, value);
    }

    /**
     * Gets the attribute value for Iddepartement, using the alias name Iddepartement.
     * @return the value of Iddepartement
     */
    public BigDecimal getIddepartement() {
        return (BigDecimal) getAttributeInternal(IDDEPARTEMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Iddepartement.
     * @param value value to set the Iddepartement
     */
    public void setIddepartement(BigDecimal value) {
        setAttributeInternal(IDDEPARTEMENT, value);
    }

    /**
     * Gets the attribute value for Codepcfc, using the alias name Codepcfc.
     * @return the value of Codepcfc
     */
    public String getCodepcfc() {
        return (String) getAttributeInternal(CODEPCFC);
    }

    /**
     * Sets <code>value</code> as the attribute value for Codepcfc.
     * @param value value to set the Codepcfc
     */
    public void setCodepcfc(String value) {
        setAttributeInternal(CODEPCFC, value);
    }

    /**
     * Gets the attribute value for Idlocalite, using the alias name Idlocalite.
     * @return the value of Idlocalite
     */
    public BigDecimal getIdlocalite() {
        return (BigDecimal) getAttributeInternal(IDLOCALITE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Idlocalite.
     * @param value value to set the Idlocalite
     */
    public void setIdlocalite(BigDecimal value) {
        setAttributeInternal(IDLOCALITE, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getCollectepfnl() {
        return (RowIterator) getAttributeInternal(COLLECTEPFNL);
    }

    /**
     * @return the associated entity CollectepfnlImpl.
     */
    public CollectepfnlImpl getIdlocaliteCollectepfnl() {
        return (CollectepfnlImpl) getAttributeInternal(IDLOCALITECOLLECTEPFNL);
    }

    /**
     * Sets <code>value</code> as the associated entity CollectepfnlImpl.
     */
    public void setIdlocaliteCollectepfnl(CollectepfnlImpl value) {
        setAttributeInternal(IDLOCALITECOLLECTEPFNL, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDetailscollectepfnl() {
        return (RowIterator) getAttributeInternal(DETAILSCOLLECTEPFNL);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDepartement() {
        return (RowIterator) getAttributeInternal(DEPARTEMENT);
    }

    /**
     * @return the associated entity LocaliteImpl.
     */
    public LocaliteImpl getLocalite() {
        return (LocaliteImpl) getAttributeInternal(LOCALITE);
    }

    /**
     * Sets <code>value</code> as the associated entity LocaliteImpl.
     */
    public void setLocalite(LocaliteImpl value) {
        setAttributeInternal(LOCALITE, value);
    }


    /**
     * @param idcollectepfnl key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal idcollectepfnl) {
        return new Key(new Object[] { idcollectepfnl });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            BigDecimal id = getLastId("getLastIdCollectePfnl1");
            setIdcollectepfnl(id);
        }
        super.doDML(operation, e);
    }
    
    public BigDecimal getLastId(String viewName) {
        BigDecimal lastId=new BigDecimal(0);
        ViewObject vo = this.getDBTransaction()
                            .getRootApplicationModule()
                            .findViewObject(viewName);
        vo.executeQuery();
        if (vo.hasNext()) {
            Row r = vo.next();
            lastId = (BigDecimal) r.getAttribute(0);
        }
        BigDecimal un = new BigDecimal(1);
        lastId = lastId.add(un);
        return lastId; 
    }
}

